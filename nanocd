#!/bin/bash
# NanoCD

set -o pipefail
set -o nounset


# Defaults
FORCE=0
PR_FLAG=0
VERBOSE=0
REPO=""                                 # Set with -r option or can be hard-coded here
LOCAL_CHECKOUT=""                       # Set with -l option or can be hard-coded here
EMAIL="your@email.tld"
PROJECT_NAME="project_name"
TEST_DIR="tests"
TEST_COMMAND="parallel ::: ./test*"     # Install parallel with 'brew install parallel'
MAIL_CMD="sendmail"
MAIL_CMD_ATTACH_FLAG="-A"
BUILD_SCRIPT=""
DEPLOY_SCRIPT=""
TIMEOUT_S=86400
PAGER=${PAGER:-less}


# Help function
function show_help() {
cat > /dev/stdout << END
${0} -r <repo> -l <local_checkout> [-b <build-script>] [-w <deploy-script>]
   [-m <email>] [-a <mail command>] [-t <mail command attach flag>]
   [-s <mail command subject flag] [-e <recipients flag>] [-n name] [-d <dir>] 
   [-c <command>] [-f] [-v] [-h] [-p]

REQUIRED ARGS:
-r - git repository, eg https://github.com/myname/myproj.git (required)
-l - local checkout of code (that gets updated to determine whether a run is needed) (required)

OPTIONAL ARGS:
-b - build script to run (default $BUILD_SCRIPT)
-w - script to run just after actually performing test (default $DEPLOY_SCRIPT)
-m - email address to send to using "mail" command (default logs to stdout)
-a - mail command to use (default=$MAIL_CMD)
-n - name for ci (unique, must be a valid directory name), eg myproj (default=$PROJECT_NAME)
-d - directory within repository that contains test scripts (default=$TEST_DIR)
-c - test command to run from -d directory (default=$TEST_COMMAND)
-t - attach argument flag for mail command (default=$MAIL_CMD_ATTACH_FLAG, empty string means no-attach)
-f - force a run even if repo has no updates (default off)
-v - verbose logging (default off)
-p - create pull request, merge pull request, set -f flag
-i - timeout in seconds (default 86400, ie one day, does KILL one hour after that)
-h - show help

EXAMPLES

- "Clone -r https://github.com/myname/myproj.git if a git fetch on /path/to/git/root/ indicates there's been an update.
  Then navigate to tests (default), run ./test.sh and mail your@email.tld after successfull or failed completion with results"

  nanocd -r https://github.com/myname/myproj.git -l /path/to/git/root/ -d tests -c ./test.sh -m your@email.tld
  nanocd -r https://github.com/myname/myproj.git -l /path/to/git/root/ -m your@email.tld
  nanocd -r https://github.com/myname/myproj.git -l /path/to/git/root/

- "Run this continuously in a crontab."

  Crontab line to run every 30 min:
  0,30 * * * * nanocd -r https://github.com/myname/myproj.git -l /path/to/git/root/
END
}


# Override defaults with commandline flags + options/arguments
while getopts "h?vfpm:n:d:r:l:c:a:b:w:t:e:s:" opt
do
    case $opt in
        h|\?)
            show_help
            exit 0
            ;;
        v) VERBOSE=1 ;;
        f) FORCE=1 ;;
        p) PR_FLAG=1 ;;
        r) REPO=$OPTARG ;;
        m) EMAIL=$OPTARG ;;
        n) PROJECT_NAME=$OPTARG ;;
        d) TEST_DIR=$OPTARG ;;
        l) LOCAL_CHECKOUT=$OPTARG ;;
        c) TEST_COMMAND=$OPTARG ;;
        b) BUILD_SCRIPT=$OPTARG ;;
        w) DEPLOY_SCRIPT=$OPTARG ;;
        a) MAIL_CMD=$OPTARG ;;
        t) MAIL_CMD_ATTACH_FLAG=$OPTARG ;;
        i) TIMEOUT_S=$OPTARG ;;
    esac
done
shift "$((OPTIND-1))"


# If no repo specified, then show_help
if [[ $REPO = "" ]]
then
    show_help
    exit 1
fi


# To show all executed commands in standard output.
# Off by default, set -v flag to enable
if [[ $VERBOSE -gt 0 ]]
then
    set -x
fi


# Temporary build directory, log file & lock file
BUILD_DIR_BASE="/tmp/nanocd"
BUILD_DIR="${BUILD_DIR_BASE}/builddir/"
mkdir -p $BUILD_DIR
LOG_FILE="${BUILD_DIR}/${PROJECT_NAME}_build_${RANDOM}.log.txt"
BUILD_LOG_FILE="${BUILD_DIR}/${PROJECT_NAME}_build.log.txt"
LOCK_FILE="${BUILD_DIR}/${PROJECT_NAME}_cd.lck"


# Common functions
function cleanup() {
    rm -rf $BUILD_DIR
    rm -f $LOCK_FILE
    # get rid of /tmp detritus, leaving anything accessed 2 days ago+
    find $BUILD_DIR_BASE -type d -atime +1 | xargs rm -rf
    echo "cleanup done"
}

function send_mail() {
    msg=$@
    if [[ $LOG_FILE != "" ]] && [[ $MAIL_CMD_ATTACH_FLAG != "" ]]
    then
        log_file_arg=($MAIL_CMD_ATTACH_FLAG $LOG_FILE)
    fi
    if [[ $EMAIL != "" ]] && [[ $MAIL_CMD != "" ]]
    then
        echo $msg | $MAIL_CMD $msg $log_file_arg[@] $EMAIL
    else
        echo "Email sending FAILED."
    fi
}


# Add date to build log file, check lock file exists
date 2>&1 | tee -a $BUILD_LOG_FILE
if [[ -a $LOCK_FILE ]]
then
    echo "Already running" | tee -a $BUILD_LOG_FILE
    exit 
fi


# Runs cleanup function if receive below SIGNAL_SPEC
trap cleanup TERM INT QUIT EXIT


# Step #0: Create pull request & merge to master if -pr flag is set
if [[ $PR_FLAG -gt 0 ]]
then
    ~/.nanocd/prs/create_pr 2>&1 | tee -a $LOG_FILE
    if [[ $? -ne 0 ]]
    then
        msg="Pull request creation for project:$PROJECT_NAME on host:$(hostname) FAILED"
        echo $msg
    fi
    ~/.nanocd/prs/merge_pr 2>&1 | tee -a $LOG_FILE
    if [[ $? -ne 0 ]]
    then
        msg="Merge pull request for project:$PROJECT_NAME on host:$(hostname) FAILED"
        echo $msg
    fi
    FORCE=1
fi


# Step #1: Check if there are any new merged pull requests on the remote master branch
touch $LOCK_FILE
cd $LOCAL_CHECKOUT
git fetch origin master 2>&1 | tee -a $BUILD_LOG_FILE
updates=$(git log HEAD..origin/master --oneline | wc -l)
echo "Updates: $updates" | tee -a $BUILD_LOG_FILE


# If there are updates pull them down, build, deploy + test.
if [[ $updates -gt 0 ]] || [[ $FORCE -gt 0 ]]
then
    touch $LOG_FILE

    # Step #2: In local repo master branch update with latest changes
    echo "Pulling" | tee -a $LOG_FILE
    git pull origin master 2>&1 | tee -a $LOG_FILE
    
    # Step #3: In /tmp build directory, clone to PROJECT_NAME, run build script
    cd $BUILD_DIR
    git clone $REPO $PROJECT_NAME
    $BUILD_SCRIPT 2>&1 | tee -a $LOG_FILE
    if [[ $? -ne 0 ]]
	then
		msg="Build script for project:$PROJECT_NAME on host:$(hostname) FAILED"
	    echo $msg
    fi

    # Step #4: Run deploy script
    $DEPLOY_SCRIPT 2>&1 | tee -a "$LOG_FILE"
    if [[ $? -ne 0 ]]
	then
		msg="Deploy script for project:$PROJECT_NAME on host:$(hostname) FAILED"
	    echo $msg
    fi

    # Step #5: Run test script(s)
    cd "${BUILD_DIR}${PROJECT_NAME}/${TEST_DIR}"
    gtimeout $TIMEOUT_S $TEST_COMMAND 2>&1 | tee -a $LOG_FILE # Install gtimeout with 'brew install coreutils'
    EXIT_CODE=$?
    if [[ $EXIT_CODE -ne 0 ]]
    then
        if [[ $EXIT_CODE -eq 124 ]]
        then
            msg="Tests (TIMEOUT) for project:$PROJECT_NAME on host:$(hostname)"
            echo $msg
        else
            msg="Tests for project:$PROJECT_NAME on host:$(hostname) FAILED"
            echo $msg
        fi
    else
        msg="Build, deploy & tests for project:$PROJECT_NAME on host:$(hostname) SUCCESSFUL"
    fi
    send_mail $msg
fi
